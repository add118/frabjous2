-- ---------------------------------
-- 1. Global Declarations
data State = S | I | R deriving (Eq, Show)

-- network people neighbours by (equivalenceClass state)

-- ---------------------------------
-- 2. Agent (Local) Declarations


agent Person { income:: Double, 
      	       state :: State
	     }

reactive state = statechart state transitions
  where infectionRatePerPerson = 0.4
        calcInfectionRate = proc input -> do
                                           nbs <- neighbors -< input 
                                           returnA -< infectionRatePerPerson * 
                                                       (fromIntegral (length (filter (==I) (map getState nbs))))
        transitions state = 
              case state of 
                     S -> pure I . rate . calcInfectionRate
                     I -> pure R . after 3
                     R -> pure S . after 3


--reactive income(t) = income(t) * 3

reactive income = income


agent Nbhd { avgIncome :: Double
           } 


population people of Person
-- removal = arr (IntMap.keysSet . IntMap.filter (\p -> getState p == R) . collection . people)
-- addition = pure [Person {getState = S, getIncome = 0}] . rate . 1


population nbhds of Nbhd



network nbhdNetwork between many neighbors in people = poissonRandomSymmetric 0.2 


peopleState = function (map getState . IntMap.elems . collection . people)
statistic percentInfected = function (\states -> fromIntegral (length (filter (==I) states)) / 
	     		       			    fromIntegral (length states))
						    . peopleState


personDistribution = do
  income <- uniform (0, 10)
  state <- frequencies [(I, 0.2), (S, 0.8), (R, 0)]
  return (Person {getIncome = income, 
                  getState = state})

initialState {
	     people = draw 100 personDistribution,
	     nbhds = draw 5 (return (Nbhd 0)),
	     nbhdNetwork = randomSymmetricNetwork 0.2
	     }


