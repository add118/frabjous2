data State = S | I | R deriving (Eq, Show)

agent Person { x :: Double,
      	       y :: Double,
      	       state :: State
	     }

reactive x = randomWalk initX (uniform (-10, 10))    	     
reactive y  = randomWalk initY (uniform (-10, 10))

reactive state = statechart state transitions
  where infectionRatePerPerson = 0.4
        calcInfectionRate t = infectionRatePerPerson * 
			    (fromIntegral (length (filter (==I) (map getState (neighbors t)))))
        transitions state = 
              case state of 
                     S -> constant I . rate . calcInfectionRate
                     I -> constant R . after 3
                     R -> constant S . after 3



population people of Person
-- addition = noise (draw 1 personDistribution) . rate . 1

network nbhdNetwork between many neighbors in people = distanceBased (euclidean [x, y]) 150

width, height :: Double
height = 500
width = 1000
personDistribution = do
  x <- uniform (0, width)
  y <- uniform (0, height)
  state <- frequencies [(I, 0.2), (S, 0.8), (R, 0)]
  return (Person {..})


statistic peopleState = function (map state . IntMap.elems . collection . people)
 
initialState {
	     people = draw 50 personDistribution,
	     nbhdNetwork = randomSymmetricNetwork 0.2
	     }


