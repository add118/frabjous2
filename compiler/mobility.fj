data InfectionState = S | I | R deriving (Eq, Show)

agent Person { 
    x :: Real = randomWalk initX (uniform (-10, 10));
    y :: Real = randomWalk initY (uniform (-10, 10));

    state :: InfectionState = stateDiagram state transitions
      	where transitions t = 
              	  case (state t) of 
                    S -> constant I . rate . infectionRate
                    I -> constant R . rate . constant 0.3
                    R -> constant S . after 4
	      infectionRate = perContactRate * numContacts
              perContactRate = 0.4
	      numContacts t = count infected (neighbors t)  }   	

infected person = (state person == I)

population people of Person
addition = noise (draw 1 personDistribution) . rate . constant 1

network nbhdNetwork 
between many neighbors in people = distanceBased (euclidean [x, y]) (<150)              

statistic numInfected = function (count infected . current . people)
 
initialState {  people = draw 30 personDistribution;
	        nbhdNetwork = emptyNetwork }
	     
width, height :: Real
height = 500
width = 1000

personDistribution = do
  x <- uniform (0, width)
  y <- uniform (0, height)
  state <- frequencies [(I, 0.2), (S, 0.8), (R, 0)]
  return (Person {..})

