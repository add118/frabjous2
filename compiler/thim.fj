-- ---------------------------------
-- 1. Global Declarations
data State = S | I | R deriving (Eq, Show)

-- network people neighbours by (equivalenceClass state)

-- ---------------------------------
-- 2. Agent (Local) Declarations


agent Person { income:: Double, 
      	       state :: State,
	       neighbours :: Vector Person,
	       nbhd :: Nbhd
	     }

reactive state = statechart state transitions
  where infectionRatePerPerson = 0.4
        calcInfectionRate :: Person -> Double
        calcInfectionRate p = infectionRatePerPerson * 
                             (fromIntegral (length (filter (==I) (map (getState) (getNeighbours p)))))
        transitions state = 
              case state of 
                     S -> pure I . rateWire' . arr (calcInfectionRate) 
                     I -> pure R . after 3
                     R -> pure S . after 3


reactive income(t) = (arr (get income))(t) * 3


agent Nbhd { avgIncome :: Double,
      	     residents :: Vector Person
           } 

reactive avgIncome = arr (averageIncome . getResidents) 
    where averageIncome people = (sum . map (getIncome) $ people) 
                                  / fromIntegral (length people)


population people of Person
removal = arr (filter (\p -> getState p == R))


population nbhds of Nbhd



network people nbhd with nbhds residents by evenlyDistribute
