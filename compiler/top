{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE NoMonomorphismRestriction #-}
{-# LANGUAGE Arrows #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}


module Main where

import Control.Wire (mkGen, (.), stepWire, stepWireP, WireP)
import Control.Monad hiding (when, mapM, sequence)
import Control.Monad.Random hiding (fromList)
import Control.Monad.Identity (Identity)

-- NOTE: by default, sequence operations are VECTOR ones
import Prelude hiding ((.), id, mapM, sequence)
import Control.Arrow
import qualified Data.List as List
import Data.Either (rights)
import qualified Data.Traversable as Traversable
import Control.Wire.Classes
import System.IO
import System.Environment (getArgs)
import Data.Aeson
import Data.Text (Text)
import qualified Data.Vector as Vector
import qualified Data.ByteString.Lazy as ByteString


import StandardLibrary
import InternalLibrary


import Data.Map (Map, (!))
import qualified Data.Map as Map
import Data.IntMap (IntMap)
import qualified Data.IntMap as IntMap
import Data.IntSet (IntSet)
import qualified Data.IntSet as IntSet





